{
    "Add syntax": {
        "scope": "proto3",
        "prefix": "syntax",
        "body": [
            "syntax = \"proto3\";"
        ]
    },
    "Add package name": {
        "scope": "proto3",
        "prefix": "package",
        "body": [
            "package com.example.shoppingcart;"
        ]
    },
    "Add imports": {
        "scope": "proto3",
        "prefix": "import",
        "body": [
            "import \"akkaserverless/annotations.proto\";",
            "import \"google/api/annotations.proto\";",
            "import \"google/protobuf/empty.proto\";",
            "import \"shoppingcart_domain.proto\";"
        ]
    },
    "Add message 1": {
        "scope": "proto3",
        "prefix": "m1",
        "body": [
            "message Cart {",
            "    repeated LineItem items = 1;",
            "}",
            "",
            "message LineItem {",
            "    string product_id = 1;",
            "    string name = 2;",
            "    int32 quantity = 3;",
            "}"
        ]
    },
    "Add message 2": {
        "scope": "proto3",
        "prefix": "m2",
        "body": [
            "message AddLineItem {",
            "    string cart_id = 1 [(akkaserverless.field).entity_key = true];",
            "    string product_id = 2;",
            "    string name = 3;",
            "    int32 quantity = 4;",
            "}"
        ]
    },
    "Add message 3": {
        "scope": "proto3",
        "prefix": "m3",
        "body": [
            "message RemoveLineItem {",
            "    string cart_id = 1 [(akkaserverless.field).entity_key = true];",
            "    string product_id = 2;",
            "}"
        ]
    },
    "Add message 4": {
        "scope": "proto3",
        "prefix": "m4",
        "body": [
            "message RemoveShoppingCart {",
            "    string cart_id = 1 [(akkaserverless.field).entity_key = true];",
            "}"
        ]
    },
    "Add message 5": {
        "scope": "proto3",
        "prefix": "m5",
        "body": [
            "message GetShoppingCart {",
            "    string cart_id = 1 [(akkaserverless.field).entity_key = true];",
            "}"
        ]
    },
    "Add service": {
        "scope": "proto3",
        "prefix": "svc",
        "body": [
            "service ShoppingCartService {",
            "    option (akkaserverless.service) = {",
            "        type: SERVICE_TYPE_ENTITY",
            "        component: \"com.example.shoppingcart.domain.ShoppingCart\"",
            "    };",
            "}"
        ]
    },
    "Add method 1": {
        "scope": "proto3",
        "prefix": "svc1",
        "body": [
            "rpc AddItem(AddLineItem) returns (google.protobuf.Empty) {",
            "    option (google.api.http).post = \"/cart/{cart_id}/items/add\";",
            "}"
        ]
    },
    "Add method 2": {
        "scope": "proto3",
        "prefix": "svc2",
        "body": [
            "rpc RemoveItem(RemoveLineItem) returns (google.protobuf.Empty) {",
            "    option (google.api.http).post = \"/cart/{cart_id}/items/{product_id}/remove\";",
            "}"
        ]
    },
    "Add method 3": {
        "scope": "proto3",
        "prefix": "svc3",
        "body": [
            "rpc RemoveCart (RemoveShoppingCart) returns (google.protobuf.Empty) {",
            "    option (google.api.http).post = \"/carts/{cart_id}/remove\";",
            "}"
        ]
    },
    "Add view service": {
        "scope": "proto3",
        "prefix": "svc4",
        "body": [
            "service ShoppingCartView {",
            "    rpc ShoppingCartUpdate (com.example.shoppingcart.domain.Cart) returns (com.example.shoppingcart.domain.Cart) {",
            "        option (akkaserverless.method).eventing.in = {",
            "            value_entity: \"shoppingcart\"",
            "        };",
            "        option (akkaserverless.method).view.update = {",
            "            table: \"shoppingcart\"",
            "        };",
            "    }",
            "",
            "    rpc GetCart(GetShoppingCart) returns (com.example.shoppingcart.domain.Cart) {",
            "        option (akkaserverless.method).view.query = {",
            "            query: \"SELECT * FROM shoppingcart WHERE cart_id = :cart_id\"",
            "        };",
            "        option (google.api.http) = {",
            "            get: \"/carts/{cart_id}\"",
            "        };",
            "    }",
            "}"
        ]
    },
    "Add JS import": {
        "scope": "javascript",
        "prefix": "import",
        "body": [
            "import { ValueEntity } from \"@lightbend/akkaserverless-javascript-sdk\";"
        ]
    },
    "Create entity": {
        "scope": "javascript",
        "prefix": "entity",
        "body": [
            "const entity = new ValueEntity(",
            "    [\"shoppingcart_domain.proto\", \"shoppingcart_api.proto\"],",
            "    \"com.example.shoppingcart.ShoppingCartService\",",
            "    \"shoppingcart\",",
            "    {",
            "        includeDirs: [\"./\"],",
            "        serializeFallbackToJson: true",
            "    }",
            ");",
        ]
    },
    "Initial state": {
        "scope": "javascript",
        "prefix": "initial state",
        "body": [
            "const Cart = entity.lookupType(\"com.example.shoppingcart.domain.Cart\");",
            "entity.setInitial(cartId => Cart.create({ items: [] }));",
        ]
    },
    "Command handlers": {
        "scope": "javascript",
        "prefix": "command handlers",
        "body": [
            "entity.setCommandHandlers({",
            "    AddItem: addItem,",
            "    RemoveItem: removeItem,",
            "    RemoveCart: removeCart",
            "});"
        ]
    },
    "Function code 1": {
        "scope": "javascript",
        "prefix": "func1",
        "body": [
            "function addItem(addItem, cart, ctx) {",
            "    if (addItem.quantity < 1) {",
            "        ctx.fail(\"Cannot add negative quantity to item \" + addItem.productId);",
            "    } else {",
            "        const existing = cart.items.find(item => {",
            "            return item.productId === addItem.productId;",
            "        });",
            "",
            "        if (existing) {",
            "            existing.quantity = existing.quantity + addItem.quantity;",
            "        } else {",
            "            cart.items.push(addItem);",
            "        }",
            "        ctx.updateState(cart);",
            "    }",
            "    return {};",
            "}"
        ]
    }
    ,
    "Function code 2": {
        "scope": "javascript",
        "prefix": "func2",
        "body": [
            "function removeItem(removeItem, cart, ctx) {",
            "    const existing = cart.items.find(item => {",
            "        return item.productId === removeItem.productId;",
            "    });",
            "",
            "    if (!existing) {",
            "        ctx.fail(\"Item \" + removeItem.productId + \" not in cart\");",
            "    } else {",
            "        cart.items = cart.items.filter(item => {",
            "            return item.productId !== removeItem.productId;",
            "        });",
            "",
            "        ctx.updateState(cart);",
            "    }",
            "    return {};",
            "}",
        ]
    },
    "Function code 3": {
        "scope": "javascript",
        "prefix": "func3",
        "body": [
            "function removeCart(request, cart, ctx) {",
            "    ctx.deleteState();",
            "    return {};",
            "}",
			"",
			"export default entity;"
        ]
    }
}